{"version":3,"sources":["index.tsx"],"names":["NativeModules","NativeEventEmitter","WidgetEventTypes","getRandomIntString","initEventListenersDict","RampSdkNativeModule","RampSdk","RampEvents","constructor","config","_instanceId","_subscribeToRampEvents","show","runRamp","instanceId","on","type","callback","_listeners","console","warn","allTypes","Object","values","forEach","eventHandlers","push","unsubscribe","entries","key","filteredHandlers","filter","c","addListener","event","log","_dispatchEvent","PURCHASE_CREATED","payload","purchase","purchaseViewToken","apiUrl","WIDGET_CLOSE"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter } from 'react-native';\n\nimport {\n  IHostConfig,\n  IRampSdkConfig,\n  TAllEvents,\n  TEventListenerDict,\n  WidgetEventTypes,\n} from './types';\nimport { getRandomIntString, initEventListenersDict } from './utils';\n\nexport { WidgetEventTypes as WidgetEventTypes } from './types';\n\ninterface TRampSdkNativeModule {\n  runRamp(config: IRampSdkConfig): void;\n}\n\nconst RampSdkNativeModule: TRampSdkNativeModule = NativeModules.RampSdk;\n\nconst RampEvents = new NativeEventEmitter(RampSdkNativeModule as any);\n\nexport default class RampSdk {\n  private _listeners: TEventListenerDict = initEventListenersDict();\n  private _instanceId: string;\n\n  constructor(private config: IHostConfig) {\n    this._instanceId = getRandomIntString();\n    this._subscribeToRampEvents();\n  }\n\n  public show(): RampSdk {\n    RampSdkNativeModule.runRamp({\n      instanceId: this._instanceId,\n      ...this.config,\n    });\n\n    return this;\n  }\n\n  public on<T extends TAllEvents>(\n    type: T['type'] | '*',\n    callback: (event: T) => any\n  ): RampSdk {\n    if (type !== '*' && !this._listeners[type]) {\n      // tslint:disable-next-line:no-console\n      console.warn(\n        `Unknown / unsupported event name - '${type}'. This listener will have no effect.`\n      );\n    }\n\n    if (type === '*') {\n      const allTypes = Object.values(this._listeners);\n      allTypes.forEach((eventHandlers) => eventHandlers.push(callback));\n    } else {\n      this._listeners[type].push(callback);\n    }\n\n    return this;\n  }\n\n  public unsubscribe(\n    type: TAllEvents['type'] | '*',\n    callback: (event: TAllEvents) => any\n  ): RampSdk {\n    if (type === '*') {\n      const allTypes = Object.entries(this._listeners);\n\n      allTypes.forEach(([key, eventHandlers]) => {\n        const filteredHandlers = eventHandlers.filter((c) => c !== callback);\n        this._listeners[key as TAllEvents['type']] = filteredHandlers;\n      });\n    } else {\n      this._listeners[type] = this._listeners[type].filter(\n        (c) => c !== callback\n      );\n    }\n\n    return this;\n  }\n\n  private _subscribeToRampEvents() {\n    RampEvents.addListener('onRamp', (event) => {\n      console.log('onRamp', event);\n      if (event.instanceId !== this._instanceId) {\n        return;\n      }\n      this._dispatchEvent({\n        type: WidgetEventTypes.PURCHASE_CREATED,\n        payload: {\n          purchase: event.purchase,\n          purchaseViewToken: event.purchaseViewToken,\n          apiUrl: event.apiUrl,\n        },\n      });\n    });\n\n    RampEvents.addListener('onRampDidClose', (event) => {\n      console.log('onRampDidClose', event);\n      if (event.instanceId !== this._instanceId) {\n        return;\n      }\n\n      this._dispatchEvent({\n        type: WidgetEventTypes.WIDGET_CLOSE,\n        payload: null,\n      });\n    });\n  }\n\n  private _dispatchEvent(event: TAllEvents): void {\n    const { type } = event;\n\n    this._listeners[type].forEach((callback) => callback(event));\n  }\n}\n"]}