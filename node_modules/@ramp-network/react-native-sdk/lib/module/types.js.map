{"version":3,"sources":["types.ts"],"names":["WidgetEventTypes"],"mappings":"AAAA;AAgEiB;AAUjB,WAAYA,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB","sourcesContent":["// ToDo use types from @ramp-network/ramp-instant-sdk\n\nexport interface IHostConfig {\n  swapAsset?: string;\n  swapAmount?: string;\n  fiatValue?: string;\n  fiatCurrency?: string;\n  userAddress?: string;\n  userEmailAddress?: string;\n  hostApiKey?: string;\n  hostLogoUrl: string;\n  hostAppName: string;\n  url?: string;\n  variant?: string;\n  webhookStatusUrl?: string;\n  finalUrl?: string;\n  containerNode?: string;\n  selectedCountryCode?: string;\n  defaultAsset?: string;\n  deepLinkScheme?: string;\n}\n\nexport interface IRampSdkConfig extends IHostConfig {\n  instanceId: string;\n}\n\nexport interface IPurchase {\n  id: string;\n  endTime: string | null; // purchase validity time, ISO date-time string\n  asset: IAssetInfo; // description of the purchased asset (address, symbol, name, decimals)\n  receiverAddress: string; // blockchain address of the buyer\n  cryptoAmount: string; // number-string, in wei or token units\n  fiatCurrency: string; // three-letter currency code\n  fiatValue: number; // total value the user pays for the purchase, in fiatCurrency\n  assetExchangeRate: number; // price of 1 whole token of purchased asset, in fiatCurrency\n  baseRampFee: number; // base Ramp fee before any modifications, in fiatCurrency\n  networkFee: number; // network fee for transferring the purchased asset, in fiatCurrency\n  appliedFee: number; // final fee the user pays (included in fiatValue), in fiatCurrency\n  paymentMethodType: TPaymentMethodType; // type of payment method used to pay for the swap - see values below\n  finalTxHash?: string; // hash of the crypto transfer blockchain transaction, filled once available\n  createdAt: string; // ISO date-time string\n  updatedAt: string; // ISO date-time string\n  status: TPurchaseStatus; // See available values below\n  escrowAddress?: string; // filled only for escrow-backend purchases\n  escrowDetailsHash?: string; // hash of purchase details used on-chain for escrow-based purchases\n}\n\ntype TPaymentMethodType =\n  | 'MANUAL_BANK_TRANSFER'\n  | 'AUTO_BANK_TRANSFER'\n  | 'CARD_PAYMENT'\n  | 'APPLE_PAY';\n\ntype TPurchaseStatus =\n  | 'INITIALIZED' // The purchase was initialized.\n  | 'PAYMENT_STARTED' // An automated payment was initiated, eg. via card or open banking.\n  | 'PAYMENT_IN_PROGRESS' // User completed the payment process.\n  | 'PAYMENT_FAILED' // The last payment was cancelled, rejected, or otherwise failed.\n  | 'PAYMENT_EXECUTED' // The last payment was successful.\n  | 'FIAT_SENT' // Outgoing bank transfer was confirmed on the buyer's account.\n  | 'FIAT_RECEIVED' // Payment was confirmed, final checks before crypto transfer.\n  | 'RELEASING' // Crypto release started â€“ transfer transaction or escrow release() tx was sent.\n  | 'RELEASED' // Crypto asset was confirmed to be transferred to the buyer. A terminal state.\n  | 'EXPIRED' // The time to pay for the purchase was exceeded. A terminal state.\n  | 'CANCELLED'; // The purchase was cancelled and won't be continued. A terminal state.\n\ninterface IAssetInfo {\n  address: string | null; // 0x-prefixed address for ERC-20 tokens, `null` for ETH\n  symbol: string; // asset symbol, for example `ETH`, `DAI`, `USDC`\n  type: string; // asset type & network, e.g. `ETH`, `ERC20`, `MATIC_ERC20`\n  name: string;\n  decimals: number; // token decimals, e.g. 18 for ETH/DAI, 6 for USDC\n}\n\nexport enum WidgetEventTypes {\n  PURCHASE_CREATED = 'PURCHASE_CREATED',\n  WIDGET_CLOSE = 'WIDGET_CLOSE',\n}\n\nexport interface IWidgetEvent {\n  type: string;\n  payload: any | null;\n}\n\nexport interface IPurchaseCreatedEvent extends IWidgetEvent {\n  type: WidgetEventTypes.PURCHASE_CREATED;\n  payload: {\n    purchase: IPurchase;\n    purchaseViewToken: string;\n    apiUrl: string;\n  };\n}\n\nexport interface IWidgetCloseEvent extends IWidgetEvent {\n  type: WidgetEventTypes.WIDGET_CLOSE;\n  payload: null;\n}\n\n// ToDo fix type\nexport type TEventListener = (event: any) => any;\n\nexport type TAllEvents = IPurchaseCreatedEvent | IWidgetCloseEvent;\n\nexport type TEventListenerDict = {\n  [EventType in TAllEvents['type']]: TEventListener[];\n};\n"]}