function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { NativeModules, NativeEventEmitter } from 'react-native';
import { WidgetEventTypes } from './types';
import { getRandomIntString, initEventListenersDict } from './utils';
export { WidgetEventTypes } from './types';
const RampSdkNativeModule = NativeModules.RampSdk;
const RampEvents = new NativeEventEmitter(RampSdkNativeModule);
export default class RampSdk {
  constructor(config) {
    this.config = config;

    _defineProperty(this, "_listeners", initEventListenersDict());

    _defineProperty(this, "_instanceId", void 0);

    this._instanceId = getRandomIntString();

    this._subscribeToRampEvents();
  }

  show() {
    RampSdkNativeModule.runRamp({
      instanceId: this._instanceId,
      ...this.config
    });
    return this;
  }

  on(type, callback) {
    if (type !== '*' && !this._listeners[type]) {
      // tslint:disable-next-line:no-console
      console.warn(`Unknown / unsupported event name - '${type}'. This listener will have no effect.`);
    }

    if (type === '*') {
      const allTypes = Object.values(this._listeners);
      allTypes.forEach(eventHandlers => eventHandlers.push(callback));
    } else {
      this._listeners[type].push(callback);
    }

    return this;
  }

  unsubscribe(type, callback) {
    if (type === '*') {
      const allTypes = Object.entries(this._listeners);
      allTypes.forEach(([key, eventHandlers]) => {
        const filteredHandlers = eventHandlers.filter(c => c !== callback);
        this._listeners[key] = filteredHandlers;
      });
    } else {
      this._listeners[type] = this._listeners[type].filter(c => c !== callback);
    }

    return this;
  }

  _subscribeToRampEvents() {
    RampEvents.addListener('onRamp', event => {
      console.log('onRamp', event);

      if (event.instanceId !== this._instanceId) {
        return;
      }

      this._dispatchEvent({
        type: WidgetEventTypes.PURCHASE_CREATED,
        payload: {
          purchase: event.purchase,
          purchaseViewToken: event.purchaseViewToken,
          apiUrl: event.apiUrl
        }
      });
    });
    RampEvents.addListener('onRampDidClose', event => {
      console.log('onRampDidClose', event);

      if (event.instanceId !== this._instanceId) {
        return;
      }

      this._dispatchEvent({
        type: WidgetEventTypes.WIDGET_CLOSE,
        payload: null
      });
    });
  }

  _dispatchEvent(event) {
    const {
      type
    } = event;

    this._listeners[type].forEach(callback => callback(event));
  }

}
//# sourceMappingURL=index.js.map