export interface IHostConfig {
    swapAsset?: string;
    swapAmount?: string;
    fiatValue?: string;
    fiatCurrency?: string;
    userAddress?: string;
    userEmailAddress?: string;
    hostApiKey?: string;
    hostLogoUrl: string;
    hostAppName: string;
    url?: string;
    variant?: string;
    webhookStatusUrl?: string;
    finalUrl?: string;
    containerNode?: string;
    selectedCountryCode?: string;
    defaultAsset?: string;
    deepLinkScheme?: string;
}
export interface IRampSdkConfig extends IHostConfig {
    instanceId: string;
}
export interface IPurchase {
    id: string;
    endTime: string | null;
    asset: IAssetInfo;
    receiverAddress: string;
    cryptoAmount: string;
    fiatCurrency: string;
    fiatValue: number;
    assetExchangeRate: number;
    baseRampFee: number;
    networkFee: number;
    appliedFee: number;
    paymentMethodType: TPaymentMethodType;
    finalTxHash?: string;
    createdAt: string;
    updatedAt: string;
    status: TPurchaseStatus;
    escrowAddress?: string;
    escrowDetailsHash?: string;
}
declare type TPaymentMethodType = 'MANUAL_BANK_TRANSFER' | 'AUTO_BANK_TRANSFER' | 'CARD_PAYMENT' | 'APPLE_PAY';
declare type TPurchaseStatus = 'INITIALIZED' | 'PAYMENT_STARTED' | 'PAYMENT_IN_PROGRESS' | 'PAYMENT_FAILED' | 'PAYMENT_EXECUTED' | 'FIAT_SENT' | 'FIAT_RECEIVED' | 'RELEASING' | 'RELEASED' | 'EXPIRED' | 'CANCELLED';
interface IAssetInfo {
    address: string | null;
    symbol: string;
    type: string;
    name: string;
    decimals: number;
}
export declare enum WidgetEventTypes {
    PURCHASE_CREATED = "PURCHASE_CREATED",
    WIDGET_CLOSE = "WIDGET_CLOSE"
}
export interface IWidgetEvent {
    type: string;
    payload: any | null;
}
export interface IPurchaseCreatedEvent extends IWidgetEvent {
    type: WidgetEventTypes.PURCHASE_CREATED;
    payload: {
        purchase: IPurchase;
        purchaseViewToken: string;
        apiUrl: string;
    };
}
export interface IWidgetCloseEvent extends IWidgetEvent {
    type: WidgetEventTypes.WIDGET_CLOSE;
    payload: null;
}
export declare type TEventListener = (event: any) => any;
export declare type TAllEvents = IPurchaseCreatedEvent | IWidgetCloseEvent;
export declare type TEventListenerDict = {
    [EventType in TAllEvents['type']]: TEventListener[];
};
export {};
